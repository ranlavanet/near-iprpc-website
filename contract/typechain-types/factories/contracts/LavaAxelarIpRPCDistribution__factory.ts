/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  Provider,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  LavaAxelarIpRPCDistribution,
  LavaAxelarIpRPCDistributionInterface,
} from "../../contracts/LavaAxelarIpRPCDistribution";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [],
    name: "backupOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBackupOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "name",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
        ],
        internalType: "struct LavaAxelarIpRPCDistribution.Provider[]",
        name: "providers",
        type: "tuple[]",
      },
    ],
    name: "payProviders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newBackupOwner",
        type: "address",
      },
    ],
    name: "setBackUpOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newTokenAddress",
        type: "address",
      },
    ],
    name: "updateTokenAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620015e4380380620015e48339818101604052810190620000379190620001ab565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001dd565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001738262000146565b9050919050565b620001858162000166565b81146200019157600080fd5b50565b600081519050620001a5816200017a565b92915050565b600060208284031215620001c457620001c362000141565b5b6000620001d48482850162000194565b91505092915050565b6113f780620001ed6000396000f3fe6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101a85780639d76ea58146101d3578063b6b55f25146101fe578063b84046d71461021a578063bf2554e214610243578063fc0c546a1461026e576100a7565b806313af4035146100ac5780633af8e4ab146100d55780635c241612146101005780636691461a146101295780636f9fb98a14610152578063893d20e81461017d575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190610d94565b610299565b005b3480156100e157600080fd5b506100ea6103c2565b6040516100f79190610dd0565b60405180910390f35b34801561010c57600080fd5b5061012760048036038101906101229190610fcf565b6103e8565b005b34801561013557600080fd5b50610150600480360381019061014b9190610d94565b610586565b005b34801561015e57600080fd5b506101676106f1565b6040516101749190611027565b60405180910390f35b34801561018957600080fd5b50610192610794565b60405161019f9190610dd0565b60405180910390f35b3480156101b457600080fd5b506101bd6107bd565b6040516101ca9190610dd0565b60405180910390f35b3480156101df57600080fd5b506101e86107e1565b6040516101f59190610dd0565b60405180910390f35b61021860048036038101906102139190611042565b610807565b005b34801561022657600080fd5b50610241600480360381019061023c9190610d94565b610859565b005b34801561024f57600080fd5b50610258610983565b6040516102659190610dd0565b60405180910390f35b34801561027a57600080fd5b506102836109ad565b60405161029091906110ce565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103405750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61037f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103769061116c565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061048f5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c59061116c565b60405180910390fd5b60005b81518110156105825760008282815181106104ef576104ee61118c565b5b602002602001015160000151905060008383815181106105125761051161118c565b5b602002602001015160200151905061056d8282600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109d39092919063ffffffff16565b5050808061057a906111ea565b9150506104d1565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061062d5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61066c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106639061116c565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161074e9190610dd0565b602060405180830381865afa15801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f9190611247565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610856333083600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610a52909392919063ffffffff16565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109005750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61093f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109369061116c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a4d838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401610a06929190611274565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ad4565b505050565b610ace848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401610a879392919061129d565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ad4565b50505050565b6000610aff828473ffffffffffffffffffffffffffffffffffffffff16610b6b90919063ffffffff16565b90506000815114158015610b24575080806020019051810190610b22919061130c565b155b15610b6657826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401610b5d9190610dd0565b60405180910390fd5b505050565b6060610b7983836000610b81565b905092915050565b606081471015610bc857306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401610bbf9190610dd0565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051610bf191906113aa565b60006040518083038185875af1925050503d8060008114610c2e576040519150601f19603f3d011682016040523d82523d6000602084013e610c33565b606091505b5091509150610c43868383610c4e565b925050509392505050565b606082610c6357610c5e82610cdd565b610cd5565b60008251148015610c8b575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15610ccd57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401610cc49190610dd0565b60405180910390fd5b819050610cd6565b5b9392505050565b600081511115610cf05780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d6182610d36565b9050919050565b610d7181610d56565b8114610d7c57600080fd5b50565b600081359050610d8e81610d68565b92915050565b600060208284031215610daa57610da9610d2c565b5b6000610db884828501610d7f565b91505092915050565b610dca81610d56565b82525050565b6000602082019050610de56000830184610dc1565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e3982610df0565b810181811067ffffffffffffffff82111715610e5857610e57610e01565b5b80604052505050565b6000610e6b610d22565b9050610e778282610e30565b919050565b600067ffffffffffffffff821115610e9757610e96610e01565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000819050919050565b610ec581610eb2565b8114610ed057600080fd5b50565b600081359050610ee281610ebc565b92915050565b600060408284031215610efe57610efd610ead565b5b610f086040610e61565b90506000610f1884828501610d7f565b6000830152506020610f2c84828501610ed3565b60208301525092915050565b6000610f4b610f4684610e7c565b610e61565b90508083825260208201905060408402830185811115610f6e57610f6d610ea8565b5b835b81811015610f975780610f838882610ee8565b845260208401935050604081019050610f70565b5050509392505050565b600082601f830112610fb657610fb5610deb565b5b8135610fc6848260208601610f38565b91505092915050565b600060208284031215610fe557610fe4610d2c565b5b600082013567ffffffffffffffff81111561100357611002610d31565b5b61100f84828501610fa1565b91505092915050565b61102181610eb2565b82525050565b600060208201905061103c6000830184611018565b92915050565b60006020828403121561105857611057610d2c565b5b600061106684828501610ed3565b91505092915050565b6000819050919050565b600061109461108f61108a84610d36565b61106f565b610d36565b9050919050565b60006110a682611079565b9050919050565b60006110b88261109b565b9050919050565b6110c8816110ad565b82525050565b60006020820190506110e360008301846110bf565b92915050565b600082825260208201905092915050565b7f4f6e6c7920746865206f776e6572202f206261636b75702063616e2063616c6c60008201527f20746869732066756e6374696f6e000000000000000000000000000000000000602082015250565b6000611156602e836110e9565b9150611161826110fa565b604082019050919050565b6000602082019050818103600083015261118581611149565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111f582610eb2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611227576112266111bb565b5b600182019050919050565b60008151905061124181610ebc565b92915050565b60006020828403121561125d5761125c610d2c565b5b600061126b84828501611232565b91505092915050565b60006040820190506112896000830185610dc1565b6112966020830184611018565b9392505050565b60006060820190506112b26000830186610dc1565b6112bf6020830185610dc1565b6112cc6040830184611018565b949350505050565b60008115159050919050565b6112e9816112d4565b81146112f457600080fd5b50565b600081519050611306816112e0565b92915050565b60006020828403121561132257611321610d2c565b5b6000611330848285016112f7565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561136d578082015181840152602081019050611352565b60008484015250505050565b600061138482611339565b61138e8185611344565b935061139e81856020860161134f565b80840191505092915050565b60006113b68284611379565b91508190509291505056fea26469706673582212209c579f397aeef4a8065271f541ba6e6543c49460ecb6a987689c80709a575cde64736f6c63430008130033";

type LavaAxelarIpRPCDistributionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LavaAxelarIpRPCDistributionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LavaAxelarIpRPCDistribution__factory extends ContractFactory {
  constructor(...args: LavaAxelarIpRPCDistributionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _tokenAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_tokenAddress, overrides || {});
  }
  override deploy(
    _tokenAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_tokenAddress, overrides || {}) as Promise<
      LavaAxelarIpRPCDistribution & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): LavaAxelarIpRPCDistribution__factory {
    return super.connect(runner) as LavaAxelarIpRPCDistribution__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LavaAxelarIpRPCDistributionInterface {
    return new Interface(_abi) as LavaAxelarIpRPCDistributionInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LavaAxelarIpRPCDistribution {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as LavaAxelarIpRPCDistribution;
  }
}
