/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LavaEvmosIpRPCDistribution {
  export type ProviderStruct = { name: AddressLike; value: BigNumberish };

  export type ProviderStructOutput = [name: string, value: bigint] & {
    name: string;
    value: bigint;
  };
}

export interface LavaEvmosIpRPCDistributionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "backupOwner"
      | "getBackupOwner"
      | "getOwner"
      | "owner"
      | "payProviders"
      | "setBackUpOwner"
      | "setOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "backupOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBackupOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payProviders",
    values: [LavaEvmosIpRPCDistribution.ProviderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBackUpOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "backupOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBackupOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBackUpOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
}

export interface LavaEvmosIpRPCDistribution extends BaseContract {
  connect(runner?: ContractRunner | null): LavaEvmosIpRPCDistribution;
  waitForDeployment(): Promise<this>;

  interface: LavaEvmosIpRPCDistributionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  backupOwner: TypedContractMethod<[], [string], "view">;

  getBackupOwner: TypedContractMethod<[], [string], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payProviders: TypedContractMethod<
    [providers: LavaEvmosIpRPCDistribution.ProviderStruct[]],
    [void],
    "nonpayable"
  >;

  setBackUpOwner: TypedContractMethod<
    [newBackupOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "backupOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBackupOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payProviders"
  ): TypedContractMethod<
    [providers: LavaEvmosIpRPCDistribution.ProviderStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBackUpOwner"
  ): TypedContractMethod<[newBackupOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  filters: {};
}
